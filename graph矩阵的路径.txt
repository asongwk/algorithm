/*
请设计一个函数，用来判断在一个矩阵中是否存在一条包含某字符串所有字符的路径。
路径可以从矩阵中的任意一个格子开始，每一步可以在矩阵中向左，向右，向上，向下移动一个格子。
如果一条路径经过了矩阵中的某一个格子，则该路径不能再进入该格子。 
例如 
a b c e 
s f c s 
a d e e 
矩阵中包含一条字符串"bcced"的路径，但是矩阵中不包含"abcb"路径，
因为字符串的第一个字符b占据了矩阵中的第一行第二个格子之后，路径不能再次进入该格子。


分析：回溯算法
这是一个可以用回朔法解决的典型题。
首先，在矩阵中任选一个格子作为路径的起点。如果路径上的第i个字符不是ch，
那么这个格子不可能处在路径上的第i个位置。
如果路径上的第i个字符正好是ch，那么往相邻的格子寻找路径上的第i+1个字符。
除在矩阵边界上的格子之外，其他格子都有4个相邻的格子。
重复这个过程直到路径上的所有字符都在矩阵中找到相应的位置。

由于回朔法的递归特性，路径可以被开成一个栈。当在矩阵中定位了路径中前n个字符的位置之后，
在与第n个字符对应的格子的周围都没有找到第n+1个字符，
这个时候只要在路径上回到第n-1个字符，重新定位第n个字符。
由于路径不能重复进入矩阵的格子，还需要定义和字符矩阵大小一样的布尔值矩阵，用来标识路径是否已经进入每个格子。 
当矩阵中坐标为（row,col）的格子和路径字符串中相应的字符一样时，
从4个相邻的格子(row,col-1),(row-1,col),(row,col+1)以及(row+1,col)中去定位路径字符串中下一个字符
如果4个相邻的格子都没有匹配字符串中下一个的字符，表明当前路径字符串中字符在矩阵中的定位不正确，我们需要回到前一个，然后重新定位。
一直重复这个过程，直到路径字符串上所有字符都在矩阵中找到合适的位置

*/



bool IsPath(const char* matrix, int rows,int cols, int curr,int curc,char *str, int *flag)
{
	if (*str == '\0') return true;
	if (curr < 0 || curr >= rows || curc < 0 || curc >= cols)return false;
	if (*(flag + curr*cols + curc) == 1)return false;
	if (*str != *(matrix + curr*cols + curc))return false;
	*(flag + curr*cols + curc) = 1;
	if (IsPath(matrix, rows, cols, curr-1, curc, str + 1, flag))return true;
	if (IsPath(matrix, rows, cols, curr+1, curc, str + 1, flag))return true;
	if (IsPath(matrix, rows, cols, curr, curc-1, str + 1, flag))return true;
	if (IsPath(matrix, rows, cols, curr, curc+1, str + 1, flag))return true;

	*(flag + curr*cols + curc) = 0;
	return false;
}


bool hasPath(char* matrix, int rows, int cols, char* str)
{
	int *flag = new int[rows*cols];
	memset(flag, 0, sizeof(int)*rows*cols);
	for (int i = 0; i < rows;i++){
		for (int j = 0; j < cols;j++){
			if (IsPath(matrix, rows, cols, i, j, str, flag))
				return true;
		}
	}

	delete[] flag;
	return false;
}

