#include <iostream>
#include <string>
#include <vector>
#include <queue>
#include <stack>
#include <algorithm>
#include <ctime>
#include <functional>

using namespace std;


/*
最大连续子序列和
*/
/*
枚举算法，列出所有的可能序列的头和尾
*/
int MaxSubSequence1(const int A[], int N)
{
	int sum = 0;
	int msum = 0;
	for (int i = 0; i < N; i++){
		
		for (int j = i; j < N;j++){
			sum = 0;
			for (int k = i; k < j;k++){
				sum += A[k];
			}
			if (sum > msum){
				msum = sum;
			}
		}
	}

	return msum;
}

/*
简化版的枚举算法，利用了前面求的部分序列的和
*/
int MaxSubSequence2(const int A[], int N)
{
	int sum = 0;
	int msum = 0;
	for (int i = 0; i < N; i++){
		sum = 0;
		for (int j = i; j < N;j++){
			sum += A[j];
			if (sum > msum){
				msum = sum;
			}
		}
	}
	return msum;
}

/*
动态规划算法
*/
int MaxSubSequence3(const int A[],int N)
{
	int sum = 0;
	int msum = 0;
	for (int i = 0; i < N;i++){
		sum += A[i];
		if (sum > msum) msum = sum;
		if (sum < 0) sum = 0;
	}

	return msum;
}

/*
分治法
我们把数字序列从中间分成两个部分，前半部分和后半部分，
最大序列和有三中可能，max(maxleft,maxright,（maxleftsum + maxrightsum) ）;
在前半部分，在后半部分，前部分和后部分的组合，
第三种情况复杂一些，我们要分别计算出从中间往两边开始的两个最大值，
包括边界的左边最大值和包括边界的右边最大值，
这三种情况下的值就是最大连续子序列和。
*/
int MaxSubSum(const int A[],int begin,int end)
{
	if (begin + 1 == end){
		return max(0,A[begin]);
	}

	int center = (begin + end) / 2;
	int maxleft = MaxSubSum(A,begin,center);
	int maxright = MaxSubSum(A,center,end);

	int leftsum = 0;
	int maxleftsum = 0;
	for (int i = center - 1; i >= begin;i--){
		leftsum += A[i];
		if (leftsum > maxleftsum) maxleftsum = leftsum;
	}
	int rightsum = 0;
	int maxrightsum = 0;
	for (int i = center ; i < end; i++){
		rightsum += A[i];
		if (rightsum > maxrightsum) maxrightsum = rightsum;
	}

	return max(max(maxleft,maxright),maxleftsum + maxrightsum);
}

int MaxSubSequence4(const int A[] ,int N)
{
	return MaxSubSum(A,0,N);
}



int main()
{
	int A[] = {-2,11,-4,13,-5,-2};
	cout << MaxSubSequence1(A, 6) << endl;
	cout << MaxSubSequence2(A, 6) << endl;
	cout << MaxSubSequence3(A, 6) << endl;
	cout << MaxSubSequence4(A,6) << endl;

	getchar();
	return 0;
}








