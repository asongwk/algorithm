Given a linked list, reverse the nodes of a linked list k at a time and return its modified list.
If the number of nodes is not a multiple of k then left-out nodes in the end should remain as it is.
You may not alter the values in the nodes, only nodes itself may be changed.
Only constant memory is allowed.
For example,
Given this linked list:1->2->3->4->5
For k = 2, you should return:2->1->4->3->5
For k = 3, you should return:3->2->1->4->5
这个题目的意思是反转链表中的每K个一组的节点，如果K==2，那么每2个节点元素都要反转一下，直到链表结尾，如果不够K个元素，就结束。


/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *reverseKGroup(ListNode *head, int k) {
        if(head == NULL) return head;
        if(k < 2) return head;
        if(head->next == NULL) return head;
        
        ListNode *nhead = new ListNode(0);
        nhead->next = head;
        ListNode *begin = nhead;
        ListNode *end = begin;
        
        while(true){
        	int count = k;
            while(count && end != NULL){
                end = end->next;
                count --;
            }
            if(end == NULL) break;
            
            ListNode *temp = NULL;
            ListNode *t = begin->next;
            while(begin->next != end){
                temp = begin->next;
                begin->next = temp->next;
                temp->next = end->next;
                end->next = temp;
            }
            begin = t;
            end = begin;
        }
              
        return nhead->next;
    }
};
