Clone an undirected graph. Each node in the graph contains alabeland a list of itsneighbors.

OJ's undirected graph serialization:
Nodes are labeled uniquely.
We use#as a separator for each node, and,as a separator for node label and each neighbor of the node.

As an example, consider the serialized graph{0,1,2#1,2#2,2}.
The graph has a total of three nodes, and therefore contains three parts as separated by#.
First node is labeled as0. Connect node0to both nodes1and2.
Second node is labeled as1. Connect node1to node2.
Third node is labeled as2. Connect node2to node2(itself), thus forming a self-cycle.

Visually, the graph looks like the following:
       1
      / \
     /   \
    0 --- 2
         / \
         \_/
		 
题目的意思是复制一个无向图，图采用下面给的结构体做节点，节点与节点之间的连接是vector<node*>这种多个指针的方式，我们常见的链表是一个指针的类型，注意这里的不同，理解到不同的地方，代码就可以快速的构想和编写，该算法考察的是图的遍历。


/**
 * Definition for undirected graph.
 * struct UndirectedGraphNode {
 *     int label;
 *     vector<UndirectedGraphNode *> neighbors;
 *     UndirectedGraphNode(int x) : label(x) {};
 * };
 */
class Solution {
public:
    typedef UndirectedGraphNode Node;
    
    map<Node*,Node*> m;
    
    UndirectedGraphNode *cloneGraph(UndirectedGraphNode *node) 
    {
    	if(node == NULL) return NULL;
        if(m.count(node) == 0){
            m[node] = new Node(node->label);
            for(Node* n:node->neighbors){
                m[node]->neighbors.push_back(cloneGraph(n));
            }
            
        }
        
        return m[node];
    }
    
};
