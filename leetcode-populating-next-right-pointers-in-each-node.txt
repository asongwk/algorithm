Given a binary tree
    struct TreeLinkNode {
      TreeLinkNode *left;
      TreeLinkNode *right;
      TreeLinkNode *next;
    }

Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set toNULL.
Initially, all next pointers are set toNULL.
Note:
You may only use constant extra space.
You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).

For example,
Given the following perfect binary tree,
         1
       /  \
      2    3
     / \  / \
    4  5  6  7

After calling your function, the tree should look like:
         1 -> NULL
       /  \
      2 -> 3 -> NULL
     / \  / \
    4->5->6->7 -> NULL

题目的描述如上，我们的任务是给一个完美二叉树中的next指针赋值，每一层最右边节点的next的值为NULL，中间的节点的next为该层右边的节点。
我们可以用两个队列实现，简单的广度优先搜索的编程思想。

不过网上有最容易阅读的递归的编程方式，代码如下
/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) 
    {
    	if(root == NULL) return ;
        if(root->left)
        {
            root->left->next = root->right;
        }
        if(root->next  && root->right)
        {
            root->right->next = root->next->left;
        }
        connect(root->left);
        connect(root->right);
    }
};
